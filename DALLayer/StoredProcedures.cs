using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetCMS.DataAccess{
    public partial class SPs{
        
        /// <summary>
        /// Creates an object wrapper for the AddRoleDetail Procedure
        /// </summary>
        public static StoredProcedure AddRoleDetail(int? UserId, int? RoleId)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("AddRoleDetail", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@UserId", UserId, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@RoleId", RoleId, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the AddRoleForUser Procedure
        /// </summary>
        public static StoredProcedure AddRoleForUser(int? UserEditId, string ListRole)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("AddRoleForUser", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@UserEditId", UserEditId, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@ListRole", ListRole, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the GetAllMenuAndPermissionByIdUser Procedure
        /// </summary>
        public static StoredProcedure GetAllMenuAndPermissionByIdUser(int? UserId)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("GetAllMenuAndPermissionByIdUser", DataService.GetInstance("DataAcessProvider"), "dbo");
        	
            sp.Command.AddParameter("@UserId", UserId, DbType.Int32, 0, 10);
        	
            return sp;
        }


        /// <summary>
        /// Creates an object wrapper for the SearchPagingPost Procedure
        /// </summary>
        public static StoredProcedure SearchPagingPost(int? PageSize, int? PageIndex, string Key, bool? ASC, out int Totalrow)
        {
            Totalrow = 0;
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("SearchPagingPost", DataService.GetInstance("DataAcessProvider"), "dbo");

            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);

            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);

            sp.Command.AddParameter("@Key", Key, DbType.String, null, null);

            sp.Command.AddParameter("@ASC", ASC, DbType.Boolean, null, null);

            sp.Command.AddOutputParameter("@total_row", DbType.Int32, 0, 10);
            return sp;
        }
        /// <summary>
        /// Creates an object wrapper for the SearchPagingPost Procedure
        /// </summary>
        public static StoredProcedure SearchPagingCategory(int? PageSize, int? PageIndex, string Key, bool? ASC, out int Totalrow)
        {
            Totalrow = 0;
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("SearchPagingCategory", DataService.GetInstance("DataAcessProvider"), "dbo");

            sp.Command.AddParameter("@PageSize", PageSize, DbType.Int32, 0, 10);

            sp.Command.AddParameter("@PageIndex", PageIndex, DbType.Int32, 0, 10);

            sp.Command.AddParameter("@Key", Key, DbType.String, null, null);

            sp.Command.AddParameter("@ASC", ASC, DbType.Boolean, null, null);

            sp.Command.AddOutputParameter("@total_row", DbType.Int32, 0, 10);
            return sp;
        }

    }
    
}
