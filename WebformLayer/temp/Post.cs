using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace SweetCMS.DataAccess
{
	/// <summary>
	/// Strongly-typed collection for the Post class.
	/// </summary>
    [Serializable]
	public partial class PostCollection : ActiveList<Post, PostCollection>
	{	   
		public PostCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>PostCollection</returns>
		public PostCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Post o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Post table.
	/// </summary>
	[Serializable]
	public partial class Post : ActiveRecord<Post>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Post()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Post(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Post(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Post(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Post", TableType.Table, DataService.GetInstance("DataAcessProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "Id";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarName = new TableSchema.TableColumn(schema);
				colvarName.ColumnName = "Name";
				colvarName.DataType = DbType.String;
				colvarName.MaxLength = 100;
				colvarName.AutoIncrement = false;
				colvarName.IsNullable = false;
				colvarName.IsPrimaryKey = false;
				colvarName.IsForeignKey = false;
				colvarName.IsReadOnly = false;
				colvarName.DefaultSetting = @"";
				colvarName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarName);
				
				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.String;
				colvarDescription.MaxLength = 200;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);
				
				TableSchema.TableColumn colvarContent = new TableSchema.TableColumn(schema);
				colvarContent.ColumnName = "Content";
				colvarContent.DataType = DbType.String;
				colvarContent.MaxLength = -1;
				colvarContent.AutoIncrement = false;
				colvarContent.IsNullable = false;
				colvarContent.IsPrimaryKey = false;
				colvarContent.IsForeignKey = false;
				colvarContent.IsReadOnly = false;
				colvarContent.DefaultSetting = @"";
				colvarContent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContent);
				
				TableSchema.TableColumn colvarAuthorID = new TableSchema.TableColumn(schema);
				colvarAuthorID.ColumnName = "AuthorID";
				colvarAuthorID.DataType = DbType.Int32;
				colvarAuthorID.MaxLength = 0;
				colvarAuthorID.AutoIncrement = false;
				colvarAuthorID.IsNullable = true;
				colvarAuthorID.IsPrimaryKey = false;
				colvarAuthorID.IsForeignKey = true;
				colvarAuthorID.IsReadOnly = false;
				colvarAuthorID.DefaultSetting = @"";
				
					colvarAuthorID.ForeignKeyTableName = "Users";
				schema.Columns.Add(colvarAuthorID);
				
				TableSchema.TableColumn colvarViewCount = new TableSchema.TableColumn(schema);
				colvarViewCount.ColumnName = "ViewCount";
				colvarViewCount.DataType = DbType.Int32;
				colvarViewCount.MaxLength = 0;
				colvarViewCount.AutoIncrement = false;
				colvarViewCount.IsNullable = true;
				colvarViewCount.IsPrimaryKey = false;
				colvarViewCount.IsForeignKey = false;
				colvarViewCount.IsReadOnly = false;
				
						colvarViewCount.DefaultSetting = @"((0))";
				colvarViewCount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarViewCount);
				
				TableSchema.TableColumn colvarDatetimeCreate = new TableSchema.TableColumn(schema);
				colvarDatetimeCreate.ColumnName = "DatetimeCreate";
				colvarDatetimeCreate.DataType = DbType.DateTime;
				colvarDatetimeCreate.MaxLength = 0;
				colvarDatetimeCreate.AutoIncrement = false;
				colvarDatetimeCreate.IsNullable = false;
				colvarDatetimeCreate.IsPrimaryKey = false;
				colvarDatetimeCreate.IsForeignKey = false;
				colvarDatetimeCreate.IsReadOnly = false;
				
						colvarDatetimeCreate.DefaultSetting = @"(getdate())";
				colvarDatetimeCreate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDatetimeCreate);
				
				TableSchema.TableColumn colvarActive = new TableSchema.TableColumn(schema);
				colvarActive.ColumnName = "Active";
				colvarActive.DataType = DbType.Boolean;
				colvarActive.MaxLength = 0;
				colvarActive.AutoIncrement = false;
				colvarActive.IsNullable = true;
				colvarActive.IsPrimaryKey = false;
				colvarActive.IsForeignKey = false;
				colvarActive.IsReadOnly = false;
				
						colvarActive.DefaultSetting = @"((1))";
				colvarActive.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActive);
				
				TableSchema.TableColumn colvarImageUrl = new TableSchema.TableColumn(schema);
				colvarImageUrl.ColumnName = "ImageUrl";
				colvarImageUrl.DataType = DbType.AnsiString;
				colvarImageUrl.MaxLength = 200;
				colvarImageUrl.AutoIncrement = false;
				colvarImageUrl.IsNullable = true;
				colvarImageUrl.IsPrimaryKey = false;
				colvarImageUrl.IsForeignKey = false;
				colvarImageUrl.IsReadOnly = false;
				colvarImageUrl.DefaultSetting = @"";
				colvarImageUrl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarImageUrl);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DataAcessProvider"].AddSchema("Post",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("Name")]
		[Bindable(true)]
		public string Name 
		{
			get { return GetColumnValue<string>(Columns.Name); }
			set { SetColumnValue(Columns.Name, value); }
		}
		  
		[XmlAttribute("Description")]
		[Bindable(true)]
		public string Description 
		{
			get { return GetColumnValue<string>(Columns.Description); }
			set { SetColumnValue(Columns.Description, value); }
		}
		  
		[XmlAttribute("Content")]
		[Bindable(true)]
		public string Content 
		{
			get { return GetColumnValue<string>(Columns.Content); }
			set { SetColumnValue(Columns.Content, value); }
		}
		  
		[XmlAttribute("AuthorID")]
		[Bindable(true)]
		public int? AuthorID 
		{
			get { return GetColumnValue<int?>(Columns.AuthorID); }
			set { SetColumnValue(Columns.AuthorID, value); }
		}
		  
		[XmlAttribute("ViewCount")]
		[Bindable(true)]
		public int? ViewCount 
		{
			get { return GetColumnValue<int?>(Columns.ViewCount); }
			set { SetColumnValue(Columns.ViewCount, value); }
		}
		  
		[XmlAttribute("DatetimeCreate")]
		[Bindable(true)]
		public DateTime DatetimeCreate 
		{
			get { return GetColumnValue<DateTime>(Columns.DatetimeCreate); }
			set { SetColumnValue(Columns.DatetimeCreate, value); }
		}
		  
		[XmlAttribute("Active")]
		[Bindable(true)]
		public bool? Active 
		{
			get { return GetColumnValue<bool?>(Columns.Active); }
			set { SetColumnValue(Columns.Active, value); }
		}
		  
		[XmlAttribute("ImageUrl")]
		[Bindable(true)]
		public string ImageUrl 
		{
			get { return GetColumnValue<string>(Columns.ImageUrl); }
			set { SetColumnValue(Columns.ImageUrl, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		private SweetCMS.DataAccess.CategoryDetailCollection colCategoryDetailRecords;
		public SweetCMS.DataAccess.CategoryDetailCollection CategoryDetailRecords()
		{
			if(colCategoryDetailRecords == null)
			{
				colCategoryDetailRecords = new SweetCMS.DataAccess.CategoryDetailCollection().Where(CategoryDetail.Columns.PostId, Id).Load();
				colCategoryDetailRecords.ListChanged += new ListChangedEventHandler(colCategoryDetailRecords_ListChanged);
			}
			return colCategoryDetailRecords;
		}
				
		void colCategoryDetailRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
            if (e.ListChangedType == ListChangedType.ItemAdded)
            {
		        // Set foreign key value
		        colCategoryDetailRecords[e.NewIndex].PostId = Id;
            }
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a User ActiveRecord object related to this Post
		/// 
		/// </summary>
		public SweetCMS.DataAccess.User User
		{
			get { return SweetCMS.DataAccess.User.FetchByID(this.AuthorID); }
			set { SetColumnValue("AuthorID", value.Id); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varName,string varDescription,string varContent,int? varAuthorID,int? varViewCount,DateTime varDatetimeCreate,bool? varActive,string varImageUrl)
		{
			Post item = new Post();
			
			item.Name = varName;
			
			item.Description = varDescription;
			
			item.Content = varContent;
			
			item.AuthorID = varAuthorID;
			
			item.ViewCount = varViewCount;
			
			item.DatetimeCreate = varDatetimeCreate;
			
			item.Active = varActive;
			
			item.ImageUrl = varImageUrl;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varName,string varDescription,string varContent,int? varAuthorID,int? varViewCount,DateTime varDatetimeCreate,bool? varActive,string varImageUrl)
		{
			Post item = new Post();
			
				item.Id = varId;
			
				item.Name = varName;
			
				item.Description = varDescription;
			
				item.Content = varContent;
			
				item.AuthorID = varAuthorID;
			
				item.ViewCount = varViewCount;
			
				item.DatetimeCreate = varDatetimeCreate;
			
				item.Active = varActive;
			
				item.ImageUrl = varImageUrl;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn NameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn DescriptionColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ContentColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn AuthorIDColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ViewCountColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn DatetimeCreateColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ActiveColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ImageUrlColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"Id";
			 public static string Name = @"Name";
			 public static string Description = @"Description";
			 public static string Content = @"Content";
			 public static string AuthorID = @"AuthorID";
			 public static string ViewCount = @"ViewCount";
			 public static string DatetimeCreate = @"DatetimeCreate";
			 public static string Active = @"Active";
			 public static string ImageUrl = @"ImageUrl";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
                if (colCategoryDetailRecords != null)
                {
                    foreach (SweetCMS.DataAccess.CategoryDetail item in colCategoryDetailRecords)
                    {
                        if (item.PostId != Id)
                        {
                            item.PostId = Id;
                        }
                    }
               }
		}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
                if (colCategoryDetailRecords != null)
                {
                    colCategoryDetailRecords.SaveAll();
               }
		}
        #endregion
	}
}
